(this.webpackJsonpcwm=this.webpackJsonpcwm||[]).push([[0],{13:function(e){e.exports=JSON.parse('[{"greet":"life is meaning less.","image2":"/coding/images/boom3.png","quote":"CODING IS BORING.","more2":"Identity is a construct. Free will doesnt exist.","button":"Don\'t Get Started"},{"greet2":"so are you!","image2":"/coding/images/boom3.png","quote":"Coding is difficult.","more2":"How can one ever code a website when you cannot even figure out what you wanna have for breakfast?!","button":"I am leaving this site"},{"greet":"Find some other hobby before its too late","image2":"/coding/images/boom3.png","quote":"I never wanted to do this.","more":"This is it. Welcome to my webpage where you can learn to code too! Read more about other\'s people failure stories and dissapointment to their parents here.","button":"me neither!"}]')},15:function(e){e.exports=JSON.parse('[{"id":4,"title":"Git","description":"Go back home. I mean, get started","menu":null,"author":"Aneta Camo","content":"\\n## git stash\\n\\n```git\\ngit checkout b new-branch-name\\n```\\n\\ndo something\\n\\n```git\\ngit stash save \\"some message\\"\\n```\\n\\nsaves all the work done meanwhile\\n\\n```git\\ngit stash list\\n```\\n\\nlists all the available stashes\\n`>> stash@{0}: on add: Worked on add function`\\n\\n```git\\ngit stash apply stash@{0}\\n```\\n\\nthis takes the changes but does not get rid of them.\\n\\n```git\\ngit stash pop\\n```\\n\\ntakes the first stash, applies changes and deletes the stash.\\n"},{"id":3,"title":"Excer Cises","description":"","menu":"true","author":"Aneta Camo","content":"\\n## Excercises\\n\\n### Create a button\\n\\nA button is a special element. When you _hover_ over it, it should notify you that you can interact with it by a change in its design.\\n\\n[more about states](#/css)\\n\\n> In order to get a _Smooth transition_ when hovering you can add in css `transition-duration: 500ms;` to a desired element.\\n\\n#### a plot twist.\\n\\nButton usually is a link: that means, needs to be wrapped inside an `<a></a>` tag. But sometimes wrapping a _block_ element into an _inline_ element is not considered a best practice. Therefore using a small work-around can be recomended: Instead of using a _button_ tag `<a><button>Click me</button></a>` a class called button can be simply added to `<a>` tag : `<a class=\\"button\\">Click me</a>`. Meanwhile in css:\\n\\n```css\\nbutton,\\n.button {\\n  border-radius: 8px;\\n  border: 4px solid blueviolet;\\n  background-color: transparent;\\n  color: blueviolet;\\n}\\n\\nbutton:hover,\\n.button:hover {\\n  background-color: blueviolet;\\n  color: white;\\n  transition-duration: 400ms;\\n}\\n```\\n\\n### A welcome screen\\n\\n```html\\n<section>\\n  <div class=\\"intro\\">\\n    <h1>Hello</h1>\\n    <p>Wellcome</p>\\n    <button>Read more</button>\\n  </div>\\n</section>\\n```\\n\\n### an mail signature\\n\\n### Adding a logo\\n\\n### Build a menu\\n\\nNotice a use of `<nav>` tag.\\n\\n```html\\n<nav class=\\"menu\\">\\n  <div>\\n    <a href=\\"about.html\\">About</a>\\n  </div>\\n  <div>\\n    <a href=\\"oats.html\\">Oats</a>\\n  </div>\\n  <div>\\n    <a href=\\"contact.html\\">Contact</a>\\n  </div>\\n</nav>\\n```\\n\\n#### Build a second-level menu\\n\\n```html\\n<nav class=\\"menu\\">\\n  <ul>\\n    <li>\\n      <a href=\\"about.html\\">About</a>\\n    </li>\\n    <li>\\n      <a href=\\"oats.html\\">Oats</a>\\n      <ul class=\\"secondary\\">\\n        <li>\\n          <a href=\\"morning.html\\">Morning Oats</a>\\n        </li>\\n        <li>\\n          <a href=\\"afternoon.html\\">Afternoon Oats</a>\\n        </li>\\n        <li>\\n          <a href=\\"evening.html\\">Evening Oats</a>\\n        </li>\\n      </ul>\\n    </li>\\n    <li>\\n      <a href=\\"contact.html\\">Contact</a>\\n    </li>\\n  </ul>\\n</nav>\\n```\\n\\n<nav class=\\"test-menu\\">\\n  <ul>\\n    <li>\\n      <a href=\\"about.html\\">About</a>\\n    </li>\\n    <li>\\n      <a href=\\"oats.html\\">Oats</a>\\n      <ul class=\\"secondary\\">\\n        <li>\\n          <a href=\\"morning.html\\">Morning Oats</a>\\n        </li>\\n        <li>\\n          <a href=\\"afternoon.html\\">Afternoon Oats</a>\\n        </li>\\n        <li>\\n          <a href=\\"evening.html\\">Evening Oats</a>\\n        </li>\\n      </ul>\\n    </li>\\n    <li>\\n      <a href=\\"contact.html\\">Contact</a>\\n    </li>\\n  </ul>\\n</nav>\\n\\n#### add a hamburger menu\\n\\n### Favicon & meta descriptions\\n\\n### Create a custom pointer\\n\\n### Make a side menu\\n\\n### Coding a slider\\n\\n### Custom Text-highlighting\\n\\n### Build a responsive layout\\n\\n### Flexbox item list\\n\\n### Carousel\\n"},{"id":1,"title":"Css Props","description":"List of the most useful CSS properties and examples of use","menu":null,"author":"Aneta Camo","content":"\\n# list of useful css properities\\n\\nFor the sake of all of us this is not a complete list. For the full exhausting list of CSS properities look a those [539 styles total](https://www.w3.org/Style/CSS/all-properties.en.html)\\n\\n### background styling\\n\\n| tag syntax          | example of use                                               | default styles | description                                                                                                                                                                                                            |\\n| ------------------- | ------------------------------------------------------------ | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| background-color    | blue, Tomato, DodgerBlue... - #fff, #f0f0f0 - rgb(255,255,0) | transparent    | a background color. Accepts hex color, rgb or any of the [predefined color names](\\"https://www.w3.org/wiki/CSS/Properties/color/keywords\\"). [More about colors](https://www.w3schools.com/cssref/css_colors_legal.asp) |\\n| background-image    | url(\\"image.jpg\\")                                             | none           | a background image                                                                                                                                                                                                     |\\n| background-origin   | padding-box,border-box,content-box,initial,inherit           | padding-box    | Specifies where does the image start in a div                                                                                                                                                                          |\\n| background-position | left top, top right, 10% 20%, 200px 300px                    | 0% 0%          | Specifies the position of the bg image. By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally                                                   |\\n| background-repeat   | no-repeat, repeat                                            | repeat         | The background-repeat property sets if/how a background image will be repeated. By default, a background-image is repeated both vertically and horizontally.                                                           |\\n| background-size     | auto, length, percentage, cover, contain, initial, inherit   | auto           | Specifies the position of the bg image.                                                                                                                                                                                |\\n\\n### managing the size and space\\n\\n| tag syntax            | example of use          | default styles | description                                                                                                                                                                                                                                                                                                        |\\n| --------------------- | ----------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| margin                | -20px, 20px, auto       | 0              | Creates an outer frame for the div content                                                                                                                                                                                                                                                                         |\\n| padding               | 20px, auto              | 0              | Invisible inner frame that creates space that will not be taken by child element. Works like a border without a color.                                                                                                                                                                                             |\\n| box-sizing            | content-box, border-box | content-box    | Defines how the width and height of an element are calculated: should they include padding and borders, or not.                                                                                                                                                                                                    |\\n| height                | 200px, 50%, 100vh       | auto           | Creates an outer frame for the div content                                                                                                                                                                                                                                                                         |\\n| width                 | -20px, 20px, auto       | auto           | The height property sets the height of an element. The height of an element does not include padding, borders, or margins!                                                                                                                                                                                         |\\n| max-width, max-height | -20px, 20px, auto       | none           | sets the width of an element. Default width of an element does not include padding, borders, or margins!                                                                                                                                                                                                           |\\n| overflow              | -20px, 20px, auto       | visible        | The overflow property specifies what should happen if content overflows an element\'s box. This property specifies whether to clip content or to add scrollbars when an element\'s content is too big to fit in a specified area. Note: The overflow property only works for block elements with a specified height. |\\n\\n<div class=\\"flex\\">\\n  <div class=\\"square\\"><b>width: 140px<br/> height: 140px</b></div>\\n  <div class=\\"square padding\\">width: 140px<br/> height: 140px<br/><b>padding: 16px</b></div>\\n  <div class=\\"square padding framed\\">width: 140px<br/> height: 140px<br/>padding: 16px<br/><b>border: 16px</b></div>\\n  <div class=\\"square padding framed margin\\">width: 140px<br/> height: 140px<br/>padding: 16px<br/>border: 16px<br><b>margin: 16px</b></div>\\n</div>\\n\\n### Border\\n\\n| tag syntax    | example of use                                                     | default styles    | description                                                                                                                                                                                                             |\\n| ------------- | ------------------------------------------------------------------ | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| border        | 2px solid blue                                                     | medium none color | The border property is a shorthand property for: border-width, border-style (required), border-color                                                                                                                    |\\n| border-style  | dotted , dashed , solid , double , groove , ridge , inset , outset | none              | The border-style property sets the style of an element\'s four borders. This property can have from one to four values.                                                                                                  |\\n| border-image  | url(\\"image.jpg\\")                                                   | none              | The border-image property allows you to specify an image to be used as the border around an element                                                                                                                     |\\n| border-radius | 8px, 2rem, 50%,                                                    | 0                 | This property allows you to add rounded corners to elements! This property can have from one to four values                                                                                                             |\\n| box-shadow    | h-offset v-offset blur spread color                                | none              | Adds one or more shadows to an element._h-offset, v-offset_ horizontal and vertical offset of a shadow in numeric values. _blur_ level of blurness in numeric values. _spread_ spreading of a shade _color_ of a shade. |\\n\\n### Display\\n\\n| tag syntax | example of use                          | default styles    | description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\\n| ---------- | --------------------------------------- | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| display    | block, inline, inline-block, flex, none | medium none color | _block_ means an item takes the full width of a container. Most of elements are block by default like `<div>`,`<p>`,`<h1>`... _inline_ will only take as much space as its content needs. Ignores margin and padding if it is setted, width and height. Example of inline elements: `a, b, i, input, span`... _inline-block_ useful for `button` or menu items, allows to set a width and height on the element. Top and bottom margins/paddings are respected. _none_ will make element disappear |\\n| text-align | left, right, center, justify            | left              | Sets how content is aligned                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\\n\\n### Flexbox\\n\\nFlexbox is a great way how to handle content that needs to be centered. Especially when working with multiple columns. Following features are only working on a element that has setted `display:flex`\\n\\n| tag syntax      | example of use                                                                                                                      | default styles | description                                                                                                                                                |\\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| flex-direction  | row, row-reverse, column, column-reverse                                                                                            | row            | Specifies the default alignment for items within the flex container..                                                                                      |\\n| flex-wrap       | nowrap, wrap, wrap-reverse                                                                                                          | nowrap         | By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.                    |\\n| justify-content | flex-start, flex-end, center, space-between, space-around, space-evenly, start, end, left, right ... + safe, unsafe                 | flex-start     | It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size |\\n| align-items     | stretch, flex-start, flex-end, center, baseline, first baseline, last baseline, start, end, self-start, self-end + ... safe, unsafe | stretch        | distributes items along the cross axis on the current line                                                                                                 |\\n\\n[a complete quide to flexbox](\\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\\")\\n\\n### position\\n\\n| tag syntax               | example of use                            | default styles | description                                                                                                                                                                                                                                                                                                                   |\\n| ------------------------ | ----------------------------------------- | -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| position                 | static, absolute, fixed, relative, sticky | static         | _static_ Elements render in order, as they appear in the document flow. _fixed_ The element is positioned relative to the browser window. _absolute_ The element is positioned relative to its first positioned (not static) ancestor element. [More about positions](https://www.w3schools.com/cssref/pr_class_position.asp) |\\n| z-index                  | 1,2,3...999                               | 0              | _Only works on non-static elements_ Specifies a layering or stacking order for positioned elements.                                                                                                                                                                                                                           |\\n| top, bottom, left, right | 200px, 10%, 1rem                          | 0              | _Only works on non-static elements_ takes the first parent element with setted position relative as a referance. and from its borders positions itself.                                                                                                                                                                       |\\n\\n### Cursor\\n\\n| tag syntax | example of use                                                 | default styles | description                                                                    |\\n| ---------- | -------------------------------------------------------------- | -------------- | ------------------------------------------------------------------------------ |\\n| cursor     | pointer, progress, text, url, wait, none, url(\\"img/image.jpg\\") | auto           | specifies the look of mouse cursor when _hovering_ - pointing over an element. |\\n\\n### font styling\\n\\n| tag syntax      | example of use                                                     | default styles                          | description                                                                                                                                                                                                                                                                                                                                                                                                               |\\n| --------------- | ------------------------------------------------------------------ | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| font-family     | Open Sans, Roboto Slab, Oswald                                     | depends on the browser. Times New Roman | The font-family property specifies the font for an element. The font-family property can hold several font names as a \\"fallback\\" system. If the browser does not support the first font, it tries the next font.                                                                                                                                                                                                          |\\n| color           | blue, Tomato, DodgerBlue..., #fff, #f0f0f0, rgb(255,255,0)         | black                                   | Sets the color of the font                                                                                                                                                                                                                                                                                                                                                                                                |\\n| font-size       | 1rem, 2em, 24px                                                    | medium                                  | Sets the size of a font.                                                                                                                                                                                                                                                                                                                                                                                                  |\\n| font-style      | normal, italic                                                     | normal                                  | A way to make a text italic                                                                                                                                                                                                                                                                                                                                                                                               |\\n| font-weight     | 100, 200, 300, 400, 500, 600, 700, 800, 900, thin, regular, bold   | regular / 400                           | Sets the boldness of a font.                                                                                                                                                                                                                                                                                                                                                                                              |\\n| letter-spacing  | 1.2px, 2px                                                         | 1                                       | Specifies the area between all letters in a line of text. It is not to be confused with kerning, which refers to the manipulation of space between two individual letters. Kerning is not usually practiced on the web.                                                                                                                                                                                                   |\\n| line-height     | 1,1...                                                             | normal                                  | The line-height property specifies the height of a line.                                                                                                                                                                                                                                                                                                                                                                  |\\n| text-shadow     | _h-shadow v-shadow blur-radius color_                              | none                                    | Applies one or more shadows to the text content of an element. _h-shadow_ Required. The position of the horizontal shadow. Negative values are allowed _v-shadow_ Required. The position of the vertical shadow. Negative values are allowed _blur-radius_ Optional. The blur radius. Default value is 0 _color_ Optional. The color of the shadow. Look at CSS Color Values for a complete list of possible color values |\\n| text-transform  | none, capitalize, uppercase, lowercase                             | none                                    | Controls the capitalization of text.                                                                                                                                                                                                                                                                                                                                                                                      |\\n| text-decoration | _text-decoration-line text-decoration-color text-decoration-style_ | none                                    | Specifies the decoration added to text, optionally color and style of it. _text-decoration-line_ Sets the kind of text decoration to use (like underline, overline, line-through). _text-decoration-style_ Sets the style of the text decoration (like solid, wavy, dotted, dashed, double)                                                                                                                               |\\n| writing-mode    | horizontal-tb, vertical-rl, vertical-lr                            | horizontal-tb                           | specifies whether lines of text are laid out horizontally or vertically                                                                                                                                                                                                                                                                                                                                                   |\\n\\n### list styling\\n\\n| tag syntax | example of use                               | default styles | description                                                                                                                                                                                                   |\\n| ---------- | -------------------------------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| list-style | square, circle, disc, none, url(\'image.png\') | none           | The list-style property is a shorthand for the following properties: list-style-type list-style-position list-style-image If one of the values are missing, the default value for that property will be used. |\\n\\n### image adjustments\\n\\nobject behaves similarly to background. Instead of an image setted via background-image it is applied on img element in html itself\\n\\n| tag syntax | example of use                         | default styles | description                                                                                                                                                                                                                                                                    |\\n| ---------- | -------------------------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| object-fit | fill, contain, cover, scale-down, none | 1              | The object-fit property is used to specify how an img or video should be resized to fit its container. This property tells the content to fill the container in a variety of ways; such as \\"preserve that aspect ratio\\" or \\"stretch up and take up as much space as possible\\". |\\n\\n### opacity\\n\\n| tag syntax | example of use                    | default styles | description                                                                                                     |\\n| ---------- | --------------------------------- | -------------- | --------------------------------------------------------------------------------------------------------------- |\\n| opacity    | from 0 (invisible) to 1 (visible) | 1              | Transparency level, where 1 is not transparent at all, 0.5 is 50% see-through, and 0 is completely transparent. |\\n\\n### transitions\\n\\n| tag syntax          | example of use | default styles | description                                                                                |\\n| ------------------- | -------------- | -------------- | ------------------------------------------------------------------------------------------ |\\n| transition-delay    | 0.3s, 300ms    | 0s             | Specifies when the transition effect will start.                                           |\\n| transition-duration | 0.3s, 300ms    | 0s             | Specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete. |\\n\\n[Here you can look at all the available properties and their values. Alphabetically sorted](\\"https://www.w3schools.com/cssref/\\")\\n"},{"id":2,"title":"Css","description":"How to write css","menu":"true","author":"Aneta Camo","content":"\\n# How to write css\\n\\n## Link and create files\\n\\nStyles are defined in the files ending with `.css`\\n\\nThose css file/s are linked in the head of **html document** we want to style. Filenames are case sensitive. Here is the only one file called `style.css` being linked.\\n\\n```html\\n<head>\\n  <title></title>\\n  <link rel=\\"stylesheet\\" href=\\"/style.css\\" />\\n</head>\\n```\\n\\nFirst, we need to reference an element from html document that we want to style. We have a three paragraphs in `index.html`.\\n\\n```html\\n<head>\\n  <title></title>\\n  <link rel=\\"stylesheet\\" href=\\"/style.css\\" />\\n</head>\\n<body>\\n  <div>\\n    <p class=\\"highligted\\">first paragraph is violet</p>\\n    <p>second paragraph is gray</p>\\n    <p>third paragraph is gray</p>\\n  </div>\\n</body>\\n```\\n\\nAnd we want them to be all in gray font, the first paragraph violet. Default color is black. So this is is what we have rendered in the browser without any styles applied:\\n\\nfirst paragraph is violet<br />\\nsecond paragraph is gray<br />\\nthird paragraph is gray\\n\\nSo now in `style.css` we are giving all the paragraphs `p { ... }` _gray color_ by writing `color:gray;` into curly parenthesis.\\n\\nThen, we will call an element with `class=\'blueviolet\'` by writing `.highlighted { ... }` and giving it `color: blueviolet;`. So the previously setted color:gray on all paragraphs will be overwritten with _blueviolet_ color for this specific case with class. See the most commonly used pairs of css properties and its values <a href=\'#css\'>here</a>.\\n\\n## Referencing an element\\n\\n> We can reference all preset tag names like `h1, li, p... { ... }`or a specific class name given to any element, for example `.highligted { ... }`.\\n\\nA class in css document is always called by writing a dot before its name. Tag names do not have a dot.\\n\\n```css\\np {\\n  color: gray;\\n}\\n.highlighted {\\n  color: blueviolet;\\n}\\n```\\n\\n## Overwriting\\n\\n<p class=\'gray\'>\\n  <span class=\'blueviolet\'>first paragraph is violet</span><br />\\n  second paragraph is gray<br />\\n  third paragraph is gray\\n</p> \\n    \\n> **The latest style defined in the css document will always overwrite previously defined styles.** See how the colors render differently when the order is reversed. First we give elements with class `.highlighted` **blueviolet** color, but then we actually overwrite this style by giving color **gray** to all paragraphs.\\n\\n```css\\n.highlighted {\\n  color: blueviolet;\\n}\\np {\\n  color: gray;\\n}\\n```\\n\\n### Comment in css\\n\\n`*/ this is a comment /*`\\n\\n## Media query\\n\\nMedia query define a _breakpoint_ in a code when the design will behave differently. If you have three columns, at some point they might become way too small to fit its content on the very small devices. By setting a breakpoint you can make it appear as one column only when the screen is too small.\\n\\n```css\\n@media (max-width: 600px) {\\n  body {\\n    background-color: lightblue;\\n  }\\n}\\n```\\n\\n```css\\n@media (orientation: landscape) {\\n  body {\\n    background-color: lightblue;\\n  }\\n}\\n```\\n\\n#### commonly used breakpoins\\n\\nThere are a ton of devices on the market so we can\u2019t and we shouldn\u2019t define fixed breakpoints for each of them.\\n\\n- 320px \u2014 480px: Mobile devices.\\n- 481px \u2014 768px: iPads, Tablets.\\n- 769px \u2014 1024px: Small screens, laptops.\\n- 1025px \u2014 1200px: Desktops, large screens.\\n- 1201px and more \u2014 Extra large screens, TV.\\n\\n#### media types\\n\\nIf we don\u2019t apply a media type, the @ media rule selects all types of devices by default. Otherwise, Media types come right after the @ media rule. There are many kinds of devices but we can group them into 4 categories:\\n\\nall\u200a\u2014\u200afor all media types\\nprint\u200a\u2014\u200afor printers\\nscreen\u200a\u2014\u200afor computer screens, tablets and, smart-phones\\nspeech\u200a\u2014\u200afor screen readers that \u201cread\u201d the page out loud\\n\\n```css\\n@media only screen and (orientation: landscape) {\\n  body {\\n    background-color: lightblue;\\n  }\\n}\\n```\\n\\n## CSS pseudo classes\\n\\nA pseudo-class is used to define a special state of an element.\\n\\nFor example, it can be used to:\\n\\n- Style an element when a user mouses over it\\n- Style visited and unvisited links differently\\n- Style an element when it gets focus\\n\\n<button>Hover over me</button>\\n<input placeholder=\\"write in me\\" />\\n\\n### States\\n\\nIn the design there are elements you can interact with.\\nWhen you _hover_ over such an element, for example _link_ or _button_, it should notify you that you can interact with it by a change in its design.\\nThis kind of mouse event - when you scroll over it - is called `hover`.\\n\\nYou can add this _state_ to any of an elements in css file by `element:hover { ... }` and style it the way you want to.\\n\\n> In order to get a _Smooth transition_ when hovering you can add in css `transition-duration: 500ms;` to a desired element.\\n\\n| state  | description                                                                               |\\n| ------ | ----------------------------------------------------------------------------------------- |\\n| :hover | Selects elements when the mouse scrolls over                                              |\\n| :focus | Selects element that has focus on - for example when for field is being filled by writing |\\n\\n#### link states\\n\\n| state     | description                 |\\n| --------- | --------------------------- |\\n| a:visited | Selects all visited links   |\\n| a:link    | Selects all unvisited links |\\n| a:active  | Selects the active link     |\\n\\n### Selectors\\n\\nOther then referencing a specific div/s or an element there is a useful list of ways to reference more specific occurencies, like first child of certain element or a first occurency of a certain type.\\n\\n| state          | description                                                                                          |\\n| -------------- | ---------------------------------------------------------------------------------------------------- |\\n| :target        | #news:target Selects the current active #news element (clicked on a URL containing that anchor name) |\\n| :not(selector) | :not(p) Selects every element that is not a `<p>` element                                            |\\n\\n| selector           | description                                                                                |\\n| ------------------ | ------------------------------------------------------------------------------------------ |\\n| :first-child       | p:first-child > Selects every `<p>` elements that is the first child of its parent         |\\n| :nth-child(n)      | p:nth-child(2) Selects every paragraph that is the _second_ child of its parent            |\\n| :last-child        | Selects every element that is the last child of its parent                                 |\\n| :only-child        | Selects every element that is the only child of its parent                                 |\\n| :nth-last-child(n) | Selects every element that is the second child of its parent, counting from the last child |\\n\\n> Same can be applied for the types:\\n\\n| selector       | description                                                                                 |\\n| -------------- | ------------------------------------------------------------------------------------------- |\\n| :first-of-type | p:first-of-type > Selects every `<p>` element that is the first `<p>` element of its parent |\\n\\n#### input selectors\\n\\n- input:checked\\n- input:disabled\\n- input:enabled\\n- input:invalid\\n- input:valid\\n- input:optional\\n- input:out-of-range\\n- input:required\\n\\n> The HTML `<html>` element represents the root (top-level element) of an HTML document, so it is also referred to as the root element\\n"},{"id":5,"title":"Home","description":"Go back home. I mean, get started","menu":"true","author":"Aneta Camo","content":"\\n# Get Started\\n\\n### What is HTML and CSS?\\n\\n_HTML_ stands for hypertext markup language. It is a skeleton of elements a page consists of.\\n\\n_CSS_ stands for cascading stylesheets and is a way to style elements - _tags_ - defined in the html files. Via css you can for example control color, width, height, style the fonts etc..\\n\\n> _cascading_ means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \\"blue\\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!\\n\\n### Getting a code editor\\n\\nTo start you will need an program that will make it easy to write and read the code. Visual Studio Code is completely free and one of the most powerful and easy to use programs available.\\n\\n[Download VS Code here](https://code.visualstudio.com)\\n\\n### Check your web in browser\\n\\nCreate a folder on your desktop and open it in the VS Code. Here, create a new file and call it `index.html`. This will be a first file a web browser will look for when accessing your folder.\\n\\nGo to your browser and click `CMD + o` for mac and `CTRL + o` for windowa . Find your folder and open `index.html`. At this point your file might be empty. But this is a plce you will/can see all the code being executed! You can refresh the page with `CMD + r` for mac or `CTRL + r`.\\n\\n### Building the folder\\n\\nYour website might have more then a homepage named `index.html`. If so, those pages should be placed in the same folder and saved with their specific names: `about.html` and `contact.html` You will probably need a folder with images and a folder with styles. And this is how the structure of your folder might end up looking:\\n\\n```\\nhomepage/\\n-- index.html\\n-- about.html\\n-- contact.html\\n-- styles/\\n---- style.css\\n---- typography.css\\n-- images/\\n---- image01.jpg\\n---- image02.jpg\\n```\\n\\n### Inspecting element\\n\\nWhen you are coding most of the time it does not work. The best tool to help finding out where the problem is is a code inspector built in most of the big browsers like _chrome_ or _firefox_. Head to the browser with your web and hit `Cmd + O` or `Ctrl + O`. Here you can inspect the whole `DOM` structure. If you click on any of the `elements` you can see what styles are applied and you can add/remove or modify them to easily see how the page will look.\\n\\n### Shortcuts\\n\\n| Event                       | Shortcut on Windows | Shortcut on Mac |\\n| --------------------------- | ------------------- | --------------- |\\n| Find your folder in browser | Ctrl + O            | Cmd + O         |\\n| Refresh a page              | Ctrl + R            | Cmd + R         |\\n| Inspect an Element          | Ctrl + Shift + C    | Cmd + Shift + C |\\n| Find and highligt same text | Ctrl + D            | Cmd + D         |\\n| Comment code                | Ctrl + K + C        | Cmd + K + C     |\\n| Uncomment                   | Ctrl + K + U        | Cmd + K + U     |\\n\\n### Special characters:\\n\\n~ : alt + ^  \\n| : alt + i\\n"},{"id":8,"title":"Javascript","description":"","menu":"true","author":"Aneta Camo","content":"\\n## about JS\\n\\n1995, Brandan Eich developed a new scripting language in just 10 days. It was originally named Mocha, but quickly became known as LiveScript and, later, _JavaScript_.\\n\\n> JavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone.\\n\\nIn order to run JS needs a JavaScript engine:\\n\\n- `V8` for Chrome & Opera.\\n- `SpiderMonkey` for Firefox.\\n- `Chakra` for IE\\n- `ChakraCore` for Microsoft Edge\\n- `Nitro and SquirrelFish` for Safari, etc.\\n\\n## Getting started\\n\\n#### Linking\\n\\n1.) javascript code is stored in files with `.js` ending.\\n\\n2.) In order to link the script - it needs to be referenced in html document. Scripts can be placed both in the usually end of `<body>`, or in the `<head>`.\\n\\n```html\\n<script src=\\"file.js\\"><\/script>\\n```\\n\\n#### Targeting the html\\n\\n3.) in the body of the html file where the script was just referenced, you can add an element you would like to change: `<p id=\\"target\\">This text will be changed</p>`\\n\\n> _id_ is a different way to reference the right element from _class_. _id_ can only be used once in each html document and therefore sure to not mis-target a different element. when referencing it in css file instead of `.class` you use `#id`.\\n\\n#### Calling/Triggering the action\\n\\n4.) You will also need some kind of trigger to start this change `execute the script` - here, a button click event: `<button id=\\"trigger\\">Change text now!</button>`. It can also work for a page load, time interval etc.\\n\\n6.) in js, we need to reference `store` those two html elements we just created. For that we will use _variables_. Variables can store values, like numbers, letters, or represent objects:\\n\\n```js\\nvar element = document.getElementById(\'idName\');\\n```\\n\\nIn our code we have two elements to reference\\n\\na button to click:\\n\\n```js\\nconst trigger = document.getElementById(\'trigger\');\\n```\\n\\nand a text element to change:\\n\\n```js\\nconst target = document.getElementById(\'target\');\\n```\\n\\n7.) click the trigger\\n\\n```js\\ntrigger.onclick = () => (target.innerHTML = \'YOU CLICKED ME!\');\\n```\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <script src=\\"file.js\\"><\/script>\\n  </head>\\n  <body>\\n    <p id=\\"target\\">This text will be changed</p>\\n    <button id=\\"trigger\\">Change text!</button>\\n  </body>\\n</html>\\n```\\n\\n## Javascript Data Types\\n\\nJavaScript _variables_ are containers for storing data values\\n\\n```js\\nconst name = \'Andrea\'; // string\\nconst age = 48; // number\\n```\\n\\nJavascript _data types_\\n\\n- strings\\n- numbers\\n- booleans\\n- arrays\\n- objects\\n\\n### strings\\n\\nJavaScript _strings_ are used for storing and manipulating text.\\n\\n```js\\nconst name = \'Johny\';\\nconst mood = \'furious\';\\n```\\n\\nYou can combine _variable_ with string:\\n\\n#### string interpolation\\n\\n```js\\nconsole.log(`hello ${name}`);\\n```\\n\\n### numbers\\n\\n```js\\nconst x = 22;\\nconst y = 5;\\nconst z = x + y;\\n```\\n\\n#### _Integers_\\n\\n- _Integers_ are a type of numbers\\n- numbers without a period or exponent notation\\n- accurate up to 15 digits.\\n\\nThe maximum number of decimals is 17\\n\\n### booleans\\n\\nBooleans can only have two values: _true_ or _false_.\\n\\n```js\\nconst happy = false;\\nconst isJohnyGonnaGetIntoTheClubTonight = false;\\n```\\n\\n### arrays\\n\\n- JavaScript arrays are like lists of certain items.\\n- They are written with square brackets.\\n- Array items are separated by commas.\\n\\n```js\\nconst family = [\'uncle\', \'granddad\', \'cousin\'];\\n```\\n\\n### objects\\n\\n_Objects_ contain sets of methods and properties\\n\\nPerson is an _object_ with four members\\nJavaScript objects are written with curly braces `{}`.\\nObject properties are written as `name:value` pairs, separated by commas.\\n\\n```js\\nconst person = {\\n  firstName: \'John\',\\n  lastName: \'Doe\',\\n  age: 50,\\n  walk(),\\n};\\n```\\n\\nacessing object properities\\n\\n```js\\nobjectName.propertyName;\\nobjectName[\'propertyName\'];\\n```\\n\\nacessing object\'s methods\\n\\n```js\\nobjectName.methodName();\\n```\\n\\n> Arrays use numbered indexes. Objects use named indexes.\\n\\n## Methods\\n\\nA JavaScript function, also called method, is a block of code designed to perform a particular task.\\n\\n```js\\nmyFunction = (n1, n2) => n1 * n2;\\n```\\n\\nA JavaScript function is executed when \\"something\\" invokes it (calls it).\\n\\n```js\\nconsole.log(myFunction(4, 3));\\n```\\n\\n> `console.log` is a very straight forward way to see the result: it prints the result into a browser\'s /or other program\'s/ console\\n\\n```js\\nalert(myFunction(4, 3));\\n```\\n\\n> `alert` will print the result into the dialog in the browser where the code is ran.\\n\\n### Arrow functions\\n\\nregular function syntax:\\n\\n```js\\nconst square = function (number) {\\n  return number * number;\\n};\\n```\\n\\narrow function syntax:\\n\\n```js\\nconst square = (number) => number * number;\\n```\\n\\n> if the body of our function includes only one line and return the value we can ommit the parenthesis and return keyword\\n\\n### variables\\n\\n- _var_ accessible outside of the block where its defined.\\n- _let_ only accesible inside the block to which it is scoped\\n- _const_ cannot be reassigned\\n\\n> use `const` over `let`. Throw away `var`\\n\\n### Index\\n\\n> _index_ represents a chronologicall location of an element in the list of item starting on 0 - works for both characters in strings and items in arrays\\n\\n### Regular expressions\\n\\n> _Regular expressions_ are used to perform pattern-matching and \\"search-and-replace\\" functions on text.\\n\\n```javascript\\nconst search = /HI/i;\\n```\\n\\n`/HI/i` is a _regular expression_.\\n`HI` is a _pattern_ to be used in a search.\\n`i` is a _modifier_ (modifies the search to be case-insensitive).\\n\\n#### Modifiers\\n\\n| code | description                                                                          |\\n| ---- | ------------------------------------------------------------------------------------ |\\n| `g`  | Perform a _global match_ find all matches rather than stopping after the first match |\\n| `i`  | Perform case-insensitive matching                                                    |\\n| `m`  | Perform multiline matching                                                           |\\n\\n#### Brackets\\n\\n> _Brackets_ are used to find a range of characters:\\n\\n| code   | description                                                 |\\n| ------ | ----------------------------------------------------------- |\\n| [abc]  | Find any character between the brackets                     |\\n| [^0-9] | Find any character NOT between the brackets (any non-digit) |\\n\\n#### Metacharacters\\n\\nMetacharacters are characters with a special meaning:\\n\\n| code | description                                                |\\n| ---- | ---------------------------------------------------------- |\\n| .    | Find a single character, except newline or line terminator |\\n| \\\\w   | Find a word character                                      |\\n| \\\\W   | Find a non-word character                                  |\\n| \\\\d   | Find a digit                                               |\\n| \\\\D   | Find a non-digit character                                 |\\n| \\\\s   | Find a whitespace character                                |\\n| \\\\0   | Find a NULL character                                      |\\n\\n#### Quantifiers\\n\\n| code   | description                                                    |\\n| ------ | -------------------------------------------------------------- |\\n| n+     | Matches any string that contains at least one n                |\\n| n\\\\*    | Matches any string that contains zero or more occurrences of n |\\n| n?     | Matches any string that contains zero or one occurrences of n  |\\n| n{X}   | Matches any string that contains a sequence of X n\'s           |\\n| n{X,Y} | Matches any string that contains a sequence of X to Y n\'s      |\\n| n{X,}  | Matches any string that contains a sequence of at least X n\'s  |\\n| n\\\\$    | Matches any string with n at the end of it                     |\\n| ^n     | Matches any string with n at the beginning of it               |\\n| ?=n    | Matches any string that is followed by a specific string n     |\\n| ?!n    | Matches any string that is not followed by a specific string n |\\n\\n[more about regular expressions](https://www.w3schools.com/jsref/jsref_obj_regexp.asp)\\n"},{"id":7,"title":"Html","description":"How to write HTML document","menu":"true","author":"Aneta Camo","content":"\\n# Writing HTML\\n\\n### index.html structure\\n\\nEach html file consist of _body_ and a _head_.\\n\\n**Head** is where you define settings for your page:\\n\\n- where you link the styles `<link />`\\n- give page a name to be displayed in browser window. This is required. `<title></title>`\\n- icon that will be displayed in the browser window (_favicon_) `<title></title>`\\n- define text, image and subtitles for sharing at social networks\\n\\n[full list of items]()\\n\\n```html\\n<head>\\n  <title>Homepage</title>\\n  <link rel=\\"stylesheet\\" href=\\"/styles/style.css\\" />\\n  <link rel=\\"stylesheet\\" href=\\"/styles/typography.css\\" />\\n</head>\\n```\\n\\n**Body** is a place where you write the actual code to be rendered directly\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Homepage name</title>\\n    <link rel=\\"stylesheet\\" href=\\"/styles/style.css\\" />\\n    <link rel=\\"stylesheet\\" href=\\"/styles/typography.css\\" />\\n  </head>\\n  <body>\\n    this is where the coding happens!\\n  </body>\\n</html>\\n```\\n\\n### Comment in html\\n\\nIn html and css (and any other language) you can write notes to yourself or anyone else. Every language has a specific way to render a comment. Comments will be published and accessible in the source code but will not interact with the code.\\n\\n`\x3c!-- this is a comment in html --\x3e `\\n\\n### Additioanal head tags\\n\\nFeeding the head right data will result into ranking higher at the search results. Following data should have clear and simple messages about the page and its content.\\n\\n_Charset_ Defines the _character set_ used:\\n\\n```html\\n<meta charset=\\"UTF-8\\" />\\n```\\n\\nMain set of meta tags\\n\\n```html\\n<meta name=\\"description\\" content=\\"Free Web tutorials\\" />\\n<meta name=\\"keywords\\" content=\\"HTML, CSS, JavaScript\\" />\\n<meta name=\\"author\\" content=\\"John Doe\\" />\\n```\\n\\nThe viewport is the user\'s visible area of a web page.\\n\\n```html\\n<meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n\\nThe refresh attribute enables to refresh page in certain period\\n```\\n\\n<meta http-equiv=\\"refresh\\" content=\\"30\\" />\\n```\\n\\nThe `<base>` element specifies the base URL and/or target for all relative URLs in a page.\\nThe `<base>` tag must have either an href or a target attribute present, or both.\\nThere can only be one single <base> element in a document!\\n\\n```html\\n<base href=\\"https://www.w3schools.com/\\" target=\\"_blank\\" />\\n```\\n\\n#### Facebook, LinkedIn & Twitter sharing data\\n\\nMost of the platforms are looking for the following tags in order to create previews when the html page is linked/shared. _og_ is a short cut for _openGraph data_\\nThe _locale_ determines the language of the webpage. Defaults to en_US. use `og:locale:alternate` if you have other available language translations available.\\n\\n```html\\n<meta property=\\"og:url\\" content=\\"https://www.imdb.com/title/tt0117500/\\" />\\n<meta property=\\"og:title\\" content=\\"The Rock\\" />\\n<meta\\n  property=\\"og:description\\"\\n  content=\\"Sean Connery found fame and fortune as the\\n           suave, sophisticated British agent, James Bond.\\"\\n/>\\n<meta property=\\"og:locale\\" content=\\"da_DK\\" />\\n<meta property=\\"og:image\\" content=\\"https://ia.media-imdb.com/images/rock.jpg\\" />\\n```\\n\\n#### Twitter additional data\\n\\n_card type_ is a way that a post will br displayed: \\"summary\\", \\"summary*large_image\\", \\"app\\", or \\"player\\".\\n\\\\_site* twitter account for the website used in the card footer. @username\\n_creator_ creators twittwer username @name\\n\\n```html\\n<meta name=\\"twitter:card\\" content=\\"summary\\" />\\n<meta name=\\"twitter:site\\" content=\\"@nytimesbits\\" />\\n<meta name=\\"twitter:creator\\" content=\\"@nickbilton\\" />\\n```\\n"},{"id":10,"title":"React","description":"How to write React","menu":null,"author":"Aneta Camo","content":"\\n## add code highligter\\n\\n`npm install --save prismjs`\\n\\n```react\\nimport React, { useEffect } from \\"react\\";\\nimport Prism from \\"prismjs\\";\\nimport \\"prismjs/themes/prism-tomorrow.css\\";\\nimport \\"./styles.css\\";\\n\\nexport default function Code({ code, language }) {\\n  useEffect(() => {\\n    Prism.highlightAll();\\n  }, []);\\n  return (\\n    <div className=\\"Code\\">\\n      <pre>\\n        <code className={`language-${language}`}>{code}</code>\\n      </pre>\\n    </div>\\n  );\\n}\\n\\n```\\n"},{"id":11,"title":"Tables","description":"How to write Tables","menu":null,"author":"Aneta Camo","content":"\\n## Tables\\n\\n```html\\n<form>\\n  <label for=\\"fname\\">First name:</label><br />\\n  <input type=\\"text\\" id=\\"fname\\" name=\\"fname\\" /><br />\\n  <label for=\\"lname\\">Last name:</label><br />\\n  <input type=\\"text\\" id=\\"lname\\" name=\\"lname\\" />\\n</form>\\n```\\n\\n### Labels\\n\\n_Label_ is a reference for form elements.\\n\\nImportant for screen-reader users, because the screen-reader will read out loud the label when the user focus on the input element.\\nIt helps users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the `<label>` element, it toggles the radio button/checkbox.\\n\\n> The `for` attribute of the `<label>` tag should be equal to the id attribute of the `<input>` element to bind them together.\\n\\n### predefined input types\\n\\n```html\\n<input type=\\"button\\" />\\n```\\n\\n<input type=\\"button\\">\\n\\n```html\\n<input type=\\"checkbox\\" />\\n```\\n\\n<input type=\\"checkbox\\">\\n\\n```html\\n<input type=\\"color\\" />\\n```\\n\\n<input type=\\"color\\" />\\n\\n```html\\n<input type=\\"date\\" />\\n```\\n\\n<input type=\\"date\\" />\\n\\n```html\\n<input type=\\"datetime-local\\" />\\n```\\n\\n<input type=\\"datetime-local\\" />\\n\\n```html\\n<input type=\\"email\\" />\\n```\\n\\n<input type=\\"email\\" />\\n\\n```html\\n<input type=\\"file\\" />\\n```\\n\\n<input type=\\"file\\" />\\n\\n```html\\n<input type=\\"hidden\\" />\\n```\\n\\n<input type=\\"hidden\\" />\\n\\n<input type=\\"image\\" />\\n\\n```html\\n<input type=\\"image\\" />\\n```\\n\\n<input type=\\"month\\" />\\n\\n```html\\n<input type=\\"month\\" />\\n```\\n\\n<input type=\\"number\\" />\\n\\n```html\\n<input type=\\"number\\" />\\n```\\n\\n<input type=\\"password\\" />\\n\\n```html\\n<input type=\\"password\\" />\\n```\\n\\n<input type=\\"radio\\" />\\n\\n```html\\n<input type=\\"radio\\" />\\n```\\n\\n<input type=\\"range\\" />\\n\\n```html\\n<input type=\\"range\\" />\\n```\\n\\n<input type=\\"reset\\" />\\n\\n```html\\n<input type=\\"reset\\" />\\n```\\n\\n<input type=\\"search\\" />\\n\\n```html\\n<input type=\\"search\\" />\\n```\\n\\n<input type=\\"submit\\" />\\n\\n```html\\n<input type=\\"submit\\" />\\n```\\n\\n<input type=\\"tel\\" />\\n\\n```html\\n<input type=\\"tel\\" />\\n```\\n\\n```html\\n<input type=\\"text\\" />\\n```\\n\\n<input type=\\"text\\" />\\n\\n```html\\n<input type=\\"time\\" />\\n```\\n\\n<input type=\\"time\\" />\\n\\n```html\\n<input type=\\"url\\" />\\n```\\n\\n<input type=\\"url\\" />\\n\\n```html\\n<input type=\\"week\\" />\\n```\\n\\n<input type=\\"week\\" />\\n\\n### Input attributes\\n\\n- `value=\\"your name\\"` an initial value for an input field\\n\\n<input value=\\"your name\\" />\\n\\n- `readonly`\\n\\n- `disabled`\\n\\n- `size` The input size attribute specifies the visible width, in characters, of an input field.\\n\\nThe default value for size is 20.\\n\\n- `maxLength`The input maxlength attribute specifies the maximum number of characters allowed in an input field.\\n\\nNote: When a maxlength is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code.\\n\\n- `min` & `max` The input min and max attributes specify the minimum and maximum values for an input field.\\n\\nThe min and max attributes work with the following input types: number, range, date, datetime-local, month, time and week.\\n\\nTip: Use the max and min attributes together to create a range of legal values.\\n\\n- `multiple` specifies that the user is allowed to enter more than one value in an input field.\\n\\nThe multiple attribute works with the following input types: `email, and file.\\n\\n- `pattern=\\"[0-9]{3}-[0-9]{2}-[0-9]{3}\\"`\\n\\na regular expression that the input field\'s value is checked against, when the form is submitted.\\n\\n> Tip: Use the global title attribute to describe the pattern to help the user.\\n\\n```html\\n<form>\\n  <label for=\\"country_code\\">Country code:</label>\\n  <input\\n    type=\\"text\\"\\n    id=\\"country_code\\"\\n    name=\\"country_code\\"\\n    pattern=\\"[A-Za-z]{3}\\"\\n    title=\\"Three letter country code\\"\\n  />\\n</form>\\n```\\n\\n- `placeholder=\\"123-45-678\\"`\\n  The short hint is displayed in the input field before the user enters a value.\\n\\n <input value=\\"123-45-678\\" />\\n\\n- `required`\\n  specifies that an input field must be filled out before submitting the form.\\n\\n- `step=\\"3\\"`\\n\\nExample: if step=\\"3\\", legal numbers could be -3, 0, 3, 6, etc.\\n\\n> Tip: This attribute can be used together with the max and min attributes to create a range of legal values.\\n\\n- `autofocus`\\n  attribute specifies that an input field should automatically get focus when the page loads.\\n\\n- `height: \\"200px\\"` & `width: \\"200px\\"`\\n  If height and width are set, the space required for the image is reserved when the page is loaded.\\n\\n- `autocomplete`\\n"},{"id":9,"title":"JS methods","description":"","menu":null,"author":"Aneta Camo","content":"\\n## string methods\\n\\n```js\\nconst txt = \'Hello there\';\\n```\\n\\n| code                       | result     | description                                                                                                                                                              |\\n| -------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| `txt.length`               | `11`       | retuns length of string                                                                                                                                                  |\\n| `txt.indexOf(\\"there\\")`     | `6`        | returns the index of the first letter from the first occurrence of searched pattern (_there_). Both _indexOf()_, and _lastIndexOf()_ return -1 if the text is not found. |\\n| `txt.indexOf(\\"there\\", 3)`  | `2`        | optional _second parameter_ (3) as the starting position for the search. Both _indexOf()_, and _lastIndexOf()_ cannot take _regular expressions_.                        |\\n| `txt.lastIndexOf(\\"there\\")` | `6`        | returns the index of the last occurrence of a specified text                                                                                                             |\\n| `txt.search(\\"there\\")`      | `6`        | Works as indexOf - but cannot take a second start position argument.                                                                                                     |\\n| `txt.slice(3, 6)`          | `lo`       | will slice out the section of characters                                                                                                                                 |\\n| `txt.slice(-3)`            | `th`       | If a parameter is negative, the position is counted from the end of the string.                                                                                          |\\n| `txt.slice(3)`             | `lo there` | If you omit the second parameter, the method will slice out the rest of the string:                                                                                      |\\n\\n| code                  | result   | description                                                                                                                                                                     |\\n| --------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `txt.substring(2, 3)` | `llo th` | arguments represent the _starting and ending indexes_. Cannot accept negative indexes.                                                                                          |\\n| `txt.substr(2, 4)`    | `llo`    | arguments represent the _starting index_ and _the number of characters_ to include in the returned string. If the first parameter is negative, the position counts from the end |\\n\\n| code                           | result           | description                                                                               |\\n| ------------------------------ | ---------------- | ----------------------------------------------------------------------------------------- |\\n| `txt.replace(\\"Hello\\", \\"Bye\\")`  | `Bye there`      | replaces the first match. By default, the `replace()` method is case sensitive.           |\\n| `txt.replace(/HELLO/i, \\"Bye\\")` | `Bye there`      | `/i` is a regular expression that perfrorms case insensitive search when added like this. |\\n| `txt.replace(/HELLO/g, \\"Bye\\")` | `Bye there`      | `/g` means to replace all the matches                                                     |\\n| `txt.toUpperCase()`            | `HELLO THERE`    | uppercases the string                                                                     |\\n| `txt.trim()`                   | `Hello there`    | removes whitespace from both sides of a string                                            |\\n| `txt.charAt(1)`                | `e`              | returns character on the given position                                                   |\\n| `txt.charCode(2)`              | `72`             | returns a UTF-16 code of a character on a given position                                  |\\n| `txt.split(\\" \\")`               | `[hello, there]` | converting string to an array by empty spaces                                             |\\n\\n## Numbers\\n\\n> If you add a number and a string, the result will be a _string concatenation_ that means all the variables will become one string.\\n\\nThe operations are always done one by one from left to right - so if you add a number to a number to a string - first number and number will result into a number and then when string is added to that number it will result into a string.\\n\\n```js\\nvar x = 10;\\nvar y = 20;\\nvar z = \'The result is: \' + x + y; //The result is: 1020\\nvar a = x + y + \'is the result\'; //30 is the result\\n```\\n\\nJavaScript will try to convert numerous strings to numbers in all numeric operations except `+`:\\nJavaScript uses the + operator to concatenate the strings.\\n\\n```js\\nconst random = Math.random();\\nconst round =  Math.round(22.4)  function returns the largest integer less than or equal to a given number.\\n```\\n\\n> `Math.random()` returns a random number between 0 (inclusive), and 1 (exclusive):.\\n\\n```js\\nx = 1234.5678;\\n```\\n\\n| code                | result             | description                                                                        |\\n| ------------------- | ------------------ | ---------------------------------------------------------------------------------- |\\n| `x.toString()`      | `\\"1234.5678\\"`      | convert number into string                                                         |\\n| `x.toFixed(2)`      | `1234.56`          | returns a string, with the number written with a specified number of decimals:     |\\n| `x.toPrecision(1)`  | `1e+3`             | Returns a string, with a rounded number into a specified length:                   |\\n| `x.toPrecision(4)`  | `1235`             |\\n| `x.toPrecision(10)` | `1234.567800`      |\\n| `x.padStart(6,0)`   | `\\"000001234.5678\\"` | converts into a string and adds _number of_(6) _characters_(0) before _x_          |\\n| `x.padEnd(4,\\"c\\")`   | `\\"1234.5678ccc\\"`   | converts into a string and adds _number of_(4) _characters_(\\"c\\") to the end of _x_ |\\n\\n| code                     | result  | description                                                                                 |\\n| ------------------------ | ------- | ------------------------------------------------------------------------------------------- |\\n| `parseFloat(\\"10\\")`       | `10`    | parses a string and returns a number. Spaces are allowed. Only the first number is returned |\\n| `parseFloat(\\"10.33\\")`    | `10.33` |\\n| `parseFloat(\\"10 20 30\\")` | `10`    |\\n| `parseFloat(\\"10 years\\")` | `10`    |\\n\\n### Arrays\\n\\n```js\\nvar fruits = [\'Banana\', \'Orange\', \'Lemon\', \'Apple\'];\\n```\\n\\n| code                | result                                  | description                                                      |\\n| ------------------- | --------------------------------------- | ---------------------------------------------------------------- |\\n| `fruits[0]`         | `\\"Banana\\"`                              | accessing an array intem by its index                            |\\n| `fruits.toString()` | `\\"Banana, Orange, Lemon, Apple, Mango\\"` | converts an array to a string of (comma separated) array values. |\\n\\n#### adding and removing items\\n\\n| code                   | result                                            | description                                                                                                                                        |\\n| ---------------------- | ------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `fruits.push(\\"Mango\\")` | `[\\"Banana\\", \\"Orange\\", \\"Lemon\\", \\"Apple\\", \\"Mango\\"]` | adds a new element (\\"Mango\\") to the end of fruits array. The push() method returns the new array length                                            |\\n| `fruits.pop()`         | `[\\"Banana\\", \\"Orange\\", \\"Lemon\\",]`                  | Removes the last element (\\"Mango\\") from fruits. The pop() method returns the value that was \\"popped out\\".                                          |\\n| `delete fruits[0]`     | `[\\"Orange\\", \\"Lemon\\", \\"Apple\\"]`                    | Deletes element on the specified position                                                                                                          |\\n| `fruits.shift()`       | `[\\"Orange\\", \\"Lemon\\", \\"Apple\\"]`                    | method removes the first element and \\"shifts\\" all other elements to a lower index. The `shift()` method returns the string that was \\"shifted out\\": |\\n\\n### spread operator\\n\\n_spread operator_ does similar job to `array.concat(diffArray)`\\n\\n```js\\nconst first = [1, 2, 3];\\nconst second = [4, 5, 6];\\n\\nconst combined = first.concat(second);\\nconst combined = [...first, ...second];\\n```\\n\\n> result 1,2,3,4,5,6\\n\\nSpread operator is useful especially when multiple items need to be inserted into the array & also an easy to clone the array:\\n\\n```js\\nconst combined = [...first, ...second, \'7\'];\\n\\nconst clone = [...first];\\n```\\n\\nSame can be also done for _objects_\\n\\n```js\\nconst first = { name: \'Emilia\' };\\nconst second = { job: \'CEO\' };\\n\\nconst combined = { ...first, ...second, location: \'Guadalajara\' };\\n```\\n\\n| code                                   | result                                                  | description                                                                                                                                                                                                                                                                                         |\\n| -------------------------------------- | ------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `fruits.splice(2, 0, \\"Mango\\", \\"Kiwi\\")` | [\\"Banana\\", \\"Orange\\", \\"Mango\\", \\"Kiwi\\", \\"Lemon\\", \\"Apple\\"] | _first parameter_ (2) defines the position where new elements should be added (spliced in). _(0)_ defines how many elements should be removed. The rest of the parameters (\\"Lemon\\" , \\"Kiwi\\") define the new elements to be added. The splice() method returns an array with the deleted items.      |\\n| `fruits.splice(0, 1)`                  | [ \\"Orange\\", \\"Lemon\\", \\"Apple\\"]                           | Removes the first element of fruits                                                                                                                                                                                                                                                                 |\\n| `fruits.slice(1, 3)`                   | [ \\"Orange\\", \\"Lemon\\", \\"Apple\\"]                           | The slice() method slices out a piece of an array into a new array. This example slices out a part of an array starting from array element 1 (\\"Orange\\"). _3_ is optional argument how many to slice. The slice() method creates a new array. It does not remove any elements from the source array. |\\n\\n#### map function\\n\\na way to _iterate_ through every single item in array\\n\\n```js\\nconst fruits = fruits.map((fruit) => <li>{fruit}</li>);\\n```\\n\\n#### Array sorting\\n\\n| code                     | result                                   | description                                                               |\\n| ------------------------ | ---------------------------------------- | ------------------------------------------------------------------------- |\\n| fruits.sort();           | [\\"Apple\\", \\"Banana\\", \\"Lemon\\",\\"Orange\\", ]  | Sorts the elements of fruits alphabeticallly                              |\\n| fruits.sort().reverse(); | [ \\"Orange\\", \\"Lemon\\", \\"Banana\\", \\"Apple\\" ] | First sort the elements of fruits. Then reverse the order of the elements |\\n\\n> if numbers are sorted as strings, \\"25\\" is bigger than \\"100\\", because \\"2\\" is bigger than \\"1\\". _You can fix this by providing a compare function:_\\n\\n```js\\nvar points = [40, 100, 1, 5, 25, 10];\\npoints.sort(function (a, b) {\\n  return a - b;\\n});\\n\\npoints.sort(function (a, b) {\\n  return b - a;\\n}); // descending order\\n```\\n\\n#### The Compare Function\\n\\n```js\\n((a, b) => {return a - b}}\\n```\\n\\n`sort` consist of compare function that is applied on each two items in an array untill everything is sorted.\\n\\n- When comparing 40 and 100, the sort() method calls the compare function(40, 100).\\n- The function calculates 40 - 100 (a - b), and sorts the values according to the returned (negative, zero, positive) value.\\n- and since the result is negative (-60), the sort function will sort 40 as a value lower than 100.\\n\\n## Objects\\n\\n```js\\nvar cars = [\\n  { type: \'Volvo\', year: 2016 },\\n  { type: \'Saab\', year: 2001 },\\n  { type: \'BMW\', year: 2010 },\\n];\\n```\\n\\n### Sorting objects by their properities\\n\\ncompare function of the object\'s numeric values\\n\\n```js\\ncars.sort((a, b) => {\\n  a.year - b.year;\\n});\\n```\\n\\ncompare function of the object\'s phabeticall valuers\\n\\n```js\\ncars.sort((a, b) => {\\n  var x = a.type.toLowerCase();\\n  var y = b.type.toLowerCase();\\n  if (x < y) {\\n    return -1;\\n  }\\n  if (x > y) {\\n    return 1;\\n  }\\n  return 0;\\n});\\n```\\n\\n### object destructuring\\n\\n```js\\nconst street = adress.street;\\nconst city = adress.city;\\nconst land = adress.country;\\n```\\n\\n> the third item in the list uses also a variable name change. So from now on in the code you can just reference it as a `land`\\n\\n```js\\nconst { street, city, country: land } = address;\\n```\\n\\n### this in javascript\\n\\n_This_ keyword refers to the _whole object_ inside which its defined.\\n\\nWhen called outside of a function where it is defined - it will return the _whole window object_ - an object where it is defined. Or _undefined_ - when strictMode is enabled\\n\\n> _strictMode_ prohibits some syntax likely to be defined in future versions of ECMAScript. It prevents, or throws errors, when relatively \u201cunsafe\u201d actions are taken (such as gaining access to the global object)\\n\\nIn JS _all functions are objects_ - they have properties and methods we can use.\\n\\n#### _bind method_\\n\\n```js\\nperson.walk();\\n```\\n\\nreturns `undefined` or a _window object_\\n\\n```js\\nconst walk = person.walk.bind(person);\\nwalk();\\n```\\n\\nbind sets _this_ to point to the _object_ that it is referenced in its brackets.\\n\\n#### arrow functions and this\\n\\nArrow functions do not rebind _this_ keyword.\\n\\n```js\\nconst person = {\\n  talk() {\\n    setTimeout(() => console.log(this), 1000);\\n  },\\n};\\n```\\n\\nhere, setTimeout is a _standalone function_. That means it is called _outside_ of an object, therefore, by default _this_ returns the window object.\\n\\n> BUT - since we use _arrow function_ this will return the person object.\\n"},{"id":6,"title":"Html Tags","description":"List of most commonly used html tags","menu":null,"author":"Aneta Camo","content":"\\n# Most commonly used HTML tags\\n\\n### div\\n\\n```html\\n<div></div>\\n```\\n\\nDiv is a shortcut for a _divider_. It is a basic unit - _a building block_ of the html document. We can imagine it as an - by default - unvisible empty container.\\n\\n[more about divs](/#div)\\n\\n### images and links\\n\\n| tag syntax              | example of use                                           | default styles         | description                                                                                                                                                                                                                                              |\\n| ----------------------- | -------------------------------------------------------- | ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `<img src=\\"\\" alt=\\"\\" />` | `<img src= \\"/img/dog.png\\" alt=\\"a dog eating a salad\\" />` | display: inline-block; | **Images** _src_ attribute accepts both local and external links to images. _alt_ tag is important for SEO valiadation. That is a place to write some descriptive text about image for people with vision imparement who get the websites read out loud. |\\n| `<a href=\\"\\"></a>`       | `<a href= \\"/file.html\\" target=\\"_blank\\">learn html</a>`   | --------------         | **Links** This is a link to the _local_ file called `about.html` in your folder. `target=\\"_blank\\"` opens the link in new tab.                                                                                                                            |\\n\\n### body & Head\\n\\nEach html document consists of head and body pair tag that is displayed only once wrapped inside html pair tag.\\n\\n| tag syntax      | example of use | default styles               | description                                                                                                                                                                                |\\n| --------------- | -------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| `<html></html>` |                |                              | **Html tag** Each html document consists of head and body tag wrapped in pair of html tags.                                                                                                |\\n| `<body></body>` |                | display: block; margin: 8px; | **Body** wraps in all the directly rendered code of html page. Each html document consists of head and body tag.                                                                           |\\n| `<head></head>` |                | display: none;               | **Head** is a place where indirect settings of the page are defined: external documents are linked, favicon and page name is setted etc. Each html document consists of head and body tag. |\\n\\n### paragraphs and heading styles\\n\\n| tag syntax                                                              | example of use | default styles               | description                                                                                                                                                                                                                                                                                       |\\n| ----------------------------------------------------------------------- | -------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `<p></p>`                                                               |                |                              | **Paragraph** is a common body text.                                                                                                                                                                                                                                                              |\\n| `<h1></h1>` `<h2></h2>` `<h3></h3>` `<h4></h4>` `<h5></h5>` `<h6></h6>` |                | display: block; margin: 8px; | **Headings** _h1_ is a main title, rendered in the biggest and boldest letters by default. It should be used only once on each page and should work as a main title of a page, for improving the SEO. _h2_ is a second level, and the higher the number the smaller and less bold letters become. |\\n| `<blockquote></blockquote>`                                             |                | display: none;               | **Quotation style** highlighted paragraph                                                                                                                                                                                                                                                         |\\n\\n### text highlighting\\n\\n| tag syntax  | example of use | default styles | description                                                                |\\n| ----------- | -------------- | -------------- | -------------------------------------------------------------------------- |\\n| `<i></i>`   |                |                | _Italic text_ Makes a text that is written within the tags italic.         |\\n| `<b></b>`   |                |                | _Bold text_ Makes a text that is written within the tags bold.             |\\n| `<u></u>`   |                |                | _Underlined text_ Underlines a text written within the tags.               |\\n| `<em></em>` |                |                | _Emphasized text_ Makes a text that is written within the tags emphasized. |\\n\\n### New Line\\n\\n| tag syntax | example of use | default styles | description                                      |\\n| ---------- | -------------- | -------------- | ------------------------------------------------ |\\n| `<br />`   |                |                | _New line_ Non pair element. Creates a new line. |\\n\\n### Button\\n\\n| tag syntax           | example of use | default styles | description                                                          |\\n| -------------------- | -------------- | -------------- | -------------------------------------------------------------------- |\\n| `<button><button />` |                |                | **Button** A text between will be rendered as a button to be clicked |\\n\\n### LISTS\\n\\n`<ul></ul>`\\n\\n_unordered list_ - displays only bullets\\n\\n```html\\n<ul>\\n  <li>Coffee</li>\\n  <li>Tea</li>\\n  <li>Milk</li>\\n</ul>\\n```\\n\\n<ul>\\n  <li>Coffee</li>\\n  <li>Tea</li>\\n  <li>Milk</li>\\n</ul>\\n      \\n`<ol></ol>`\\n      \\n_ordered list_ - displays numbers\\n    \\n```html\\n<ol>\\n  <li>Coffee</li>\\n  <li>Tea</li>\\n  <li>Milk</li>\\n</ol>\\n```\\n\\n<ol>\\n  <li>Coffee</li>\\n  <li>Tea</li>\\n  <li>Milk</li>\\n</ol>\\n\\n\x3c!---\\n### form\\n\\nIf the name attribute is omitted, the value of the input field will not be sent at all.\\n\\n`<label><label/>`\\n`<input><input/>`\\n`<form><form/>`\\n`<select><select/>`\\n`<option><option/>`\\n\\n```html\\n<form action=\\"mailto:you@yourdomain.com \\">\\n  <label for=\\"fname\\">First Name:</label>\\n  <input type=\\"text\\" id=\\"fname\\" name=\\"fname\\" value=\\"your mail\\" />\\n  <label for=\\"email\\">Email:</label>\\n  <input type=\\"email\\" name=\\"mail\\" id=\\"mail\\" name=\\"mail\\" value=\\"mail\\" />\\n  Select an option:\\n  <select>\\n    <option>Love</option>\\n    <option selected>Money</option>\\n    <option>Bananas</option>\\n  </select>\\n  Select an option:\\n  <input type=\\"radio\\" id=\\"male\\" name=\\"gender\\" value=\\"male\\" />\\n  <label for=\\"male\\">Male</label><br />\\n  <input type=\\"radio\\" id=\\"female\\" name=\\"gender\\" value=\\"female\\" />\\n  <label for=\\"female\\">Female</label><br />\\n  <input type=\\"radio\\" id=\\"other\\" name=\\"gender\\" value=\\"other\\" />\\n  <label for=\\"other\\">Other</label>\\n  <input type=\\"checkbox\\" id=\\"vehicle1\\" name=\\"vehicle1\\" value=\\"Bike\\" />\\n  <label for=\\"vehicle1\\"> I have a bike</label><br />\\n  <input type=\\"checkbox\\" id=\\"vehicle2\\" name=\\"vehicle2\\" value=\\"Car\\" />\\n  <label for=\\"vehicle2\\"> I have a car</label><br />\\n  <input type=\\"checkbox\\" id=\\"vehicle3\\" name=\\"vehicle3\\" value=\\"Boat\\" />\\n  <label for=\\"vehicle3\\"> I have a boat</label>\\n  <input type=\\"submit\\" />\\n</form>\\n```\\n--\x3e\\n\\n### TABLE\\n\\nTable as default does not have a lot of styling. To get the look applied on the following form some styling in css needs to be done.\\n\\n`<table></table>`<br/>\\n`<tr></tr>`<br/>\\n`<th></th>`<br/>\\n`<td></td>`\\n\\n```html\\n<table>\\n  <tr>\\n    <th>Month</th>\\n    <th>Savings</th>\\n  </tr>\\n  <tr>\\n    <td>January</td>\\n    <td>$1</td>\\n  </tr>\\n</table>\\n```\\n\\n<table>\\n  <tr>\\n    <th>Month</th>\\n    <th>Savings</th>\\n  </tr>\\n  <tr>\\n    <td>January</td>\\n    <td>- $100</td>\\n  </tr>\\n</table></pre>\\n\\n```css\\ntable {\\n  border-collapse: collapse;\\n}\\n\\ntd,\\nth {\\n  border: 4px solid blueviolet;\\n  padding: 8px;\\n}\\nth {\\n  text-align: left;\\n  background-color: blueviolet;\\n  color: white;\\n}\\n\\ntable pre {\\n  background-color: black;\\n  color: white;\\n}\\ntable code {\\n  white-space: normal;\\n}\\n```\\n\\n## More about html elements\\n\\n### div and its family tree\\n\\n```html\\n<div class=\\"somename\\">some content</div>\\n```\\n\\nDiv is mostly here to receive content in between its tags `<div>some content<div>` and a name by setting a class `class=\\"somename\\"`. And then,to be called by its (class)name and styled in _css document_. For example, receive a background color, width or height etc.\\n\\nDiv are essential for keeping the content of html document structured. It may not seem obvious at the beggining but as the content of the page grows, some elements in layout might become duplicated or very similar. Then divs become very helpful.\\n\\nFor example a content that should be displayed in frame can be wrapped in div with class `class=\\"framed\\"` that will have a styled frame and will be easy to reuse throughout the web/project.\\nTherefore wrapping some basic repeated content - for example _paragraphs, headings or images_ - into divs with the same classname enables to easily give them same features. For example background color.\\n\\n### pair vs non-pair element\\n\\nDiv is always a _pair_ element. It means it will always consist of a double tag: an opening tag without a dash `<div>` and a closing tag with a dash`</div>`. It is an essential feature for wrapping more content in. If one of the tags is missing it will break the desired flow of the whole project.\\n\\nA _non-pair_ element. For example `<img />` or `<input />` They are already content themselfs, they cannot contain anymore elements, therefore they are single tags.\\n\\nDivs are pretty much all about hierarchy:\\n\\n```html\\n<div></div>\\n<div></div>\\n\\n<div></div>\\n<div></div>\\n```\\n\\nvs\\n\\n```html\\n<div><div></div></div>\\n\\n<div>\\n  <div></div>\\n</div>\\n```\\n"},{"id":12,"title":"Typescript","description":"","menu":null,"author":"Aneta Camo","content":"\\n## What is Typescript?\\n\\n### Typescript advantages\\n\\n- can catch errors already at _compile time_ [right in your editor while you code] - before _runtime_.\\n- constantly gives you feedback and lists option of what you can pass where during coding\\n\\n### Browsers do not understand typescript\\n\\nTypescript needs to be transpiled into javascript. So you will nedd a TS compiler in order to run it.\\n\\n### Staring Typescript\\n\\nInstalling typescript on Mac via npm:\\n`sudo npm install -g typescript`\\n\\ncheck compilers version\\n`tsc --version `\\n\\n1. transpile the code\\n   `tsc file.ts`\\n\\n2. execute the code\\n   `node file.js`\\n\\nyou can also combine those two in one command\\n`tsc file.ts | node file.js`\\n\\n## Coding Typescript\\n\\n### var vs let\\n\\nIn JS variable declared with the `var` keyword is scoped to the nearest function - and will be only available inside that function.\\n`let` would be available anywhere.\\n\\n# conclusion: always use `let` keyword\\n\\n### types\\n\\nby default a value of a type is any\\n`number`\\n\\n`boolean`\\n\\n`string`\\n\\n`any`\\n\\n#### enum\\n\\n```typescript\\nenum Color {\\n  Red,\\n  Blue,\\n  Green,\\n}\\nletBgColor = Color.Red;\\n```\\n\\nthe first item automatically gets number 0, each subsequent element gets incremented value\\n\\n#### array\\n\\n```typescript\\nlet array: any[]: = [\'hi\', 22, false]\\n\\n```\\n\\n### Type assertions\\n\\nWhen coding with TS you need to define what variable are you working with.\\n\\n```typescript\\nlet message = (<string>message).endsWith(\'c\');\\n\\nlet message2 = (message as string).endsWith(\'c\');\\n```\\n\\n### arrow function\\n\\n```typescript\\nlet log = function (message) {\\n  console.log(message);\\n};\\n```\\n\\nommit function keyword and - in case of only one line code a brackets & transform into an arrow function! :\\n\\n```typescript\\nlet log = (message) => console.log(message);\\n```\\n\\n### Inline anotation\\n\\n```typescript\\nlet drawPoint = (point { x: number, y: number}) => {};\\n```\\n\\nThis kind of function definition can be a little bit too descriptive when used multiple time - so we can take _object literals_: `point { x: number, y: number}` and move them into and _interface_\\n\\n```typescript\\ninterface Point {\\n  x: number;\\n  y: number;\\n}\\n\\nlet drawPoint = (point: Point) => {};\\n```\\n\\n### Class\\n\\nClass groups variables (in OOP called _fields_) and functions (called _methods_) that are _highly related_\\n\\n## React && TypeScript\\n\\nfirst you need to initialize your project\\n\\n```\\ncreate-react-app name-of-your-project --typescript\\n```\\n\\nor add to the existing project\\n\\n```git\\nnpm install --save typescript @types/node @types/react @types/react-dom @types/jest\\n```\\n\\n```typescript\\ninterface Person {\\n  firstName: string;\\n  lastName: string;\\n}\\n\\ninterface Props {\\n  text: string;\\n  ok?: boolean;\\n  fn: (bob: string) => string;\\n  person: Person;\\n}\\n\\nexport const TextField: RectFC<Props> = () => {\\n  return (\\n    <div>\\n      <input />\\n    </div>\\n  );\\n};\\n```\\n\\nProps and Person are now items that are mandatory to be passed with the parent component via props. A questionmark in name definition determines they are optional and will not throw an error when ommitted.\\n\\n```typescript\\nconst [count, setCount] = useState<{ text: string }>({ text: \'hello\' });\\nsetCount({\'hello\'});\\n```\\n\\nyou can actually define multiple types that can be accepted in the useState\\n\\n```typescript\\n\\ninterface TextNode {\\n  text: string\\n}\\n\\nexport const TextField: RectFC<Props> = ({}) => {\\n\\n  const [count, setCount] = useState<TextNode>({ text: \'hello\' });\\n  setCount({\'hello\'});\\n\\n  ...\\n};\\n```\\n\\n```typescript\\ninterface Props {\\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n}\\n\\nexport const TextField: RectFC<Props> = ({ handleChange }) => {\\n  const inputRef = useRef<HTMLInputElement>(null);\\n  const divRef = useRef<HTMLInputElement>(null);\\n\\n  return (\\n    <div ref={divRef}>\\n      <input ref={inputRef} onChange={handleChange} />\\n    </div>\\n  );\\n};\\n```\\n"}]')},176:function(e,n,t){"use strict";t.r(n);var a=t(1),i=t.n(a),o=t(59),s=t.n(o);t(68);function r(e){if(void 0!==e)return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")}var l=t(26),c=t(0),d=function(e){var n=e.item;return Object(c.jsxs)(l.b,{to:r(n.title),children:[Object(c.jsx)("img",{src:"/coding/images/".concat(r(n.title),".png"),alt:n.title}),Object(c.jsx)("li",{children:n.title})]})},h=t(15),p=function(){return Object(c.jsx)("div",{class:"menu bg-blueviolet",children:Object(c.jsx)("div",{class:"container flex",children:h.map((function(e){return e.menu?Object(c.jsx)(d,{item:e}):null}))})})},u=function(){return console.log(h),Object(c.jsx)("div",{className:"container-wide",children:Object(c.jsx)("div",{className:"flex box-container",children:h.map((function(e){return e.menu?Object(c.jsx)("a",{href:"/#/".concat(r(e.title)),className:"box",children:Object(c.jsxs)("div",{children:[Object(c.jsx)("img",{src:"/coding/images/".concat(r(e.title),".png"),alt:e.title}),Object(c.jsx)("h5",{children:e.title}),Object(c.jsx)("p",{children:e.description})]})}):null}))})})},m=t(61),f=t.n(m),g=t(62),b=t.n(g),y=function(e){var n=e.match,t=e.tables,a=n.path.substring(1);return Object(c.jsx)("div",{className:"container blog-text ".concat(t),children:h.map((function(e){return r(e.title)===a?Object(c.jsx)(f.a,{plugins:[b.a],children:e.content,allowDangerousHtml:!0}):null}))})};t(42),t(13),t(63),t(175);var w=t(2);var v=function(){return Object(c.jsxs)(l.a,{children:[Object(c.jsx)(p,{}),Object(c.jsxs)(w.c,{children:[Object(c.jsx)(w.a,{path:"/home",component:y}),Object(c.jsx)(w.a,{path:"/html",component:y}),Object(c.jsx)(w.a,{path:"/css",component:y}),Object(c.jsx)(w.a,{path:"/css-props",component:y}),Object(c.jsx)(w.a,{path:"/html-tags",component:y}),Object(c.jsx)(w.a,{path:"/excer-cises",component:y}),Object(c.jsx)(w.a,{path:"/typescript",component:y}),Object(c.jsx)(w.a,{path:"/javascript",component:y}),Object(c.jsx)(w.a,{path:"/git",component:y}),Object(c.jsx)(w.a,{path:"/react",component:y}),Object(c.jsx)("div",{className:"three-columns",children:Object(c.jsx)(w.a,{path:"/js-methods",component:y,tables:"three-columns"})})]}),Object(c.jsx)(u,{})]})};s.a.render(Object(c.jsx)(i.a.StrictMode,{children:Object(c.jsx)(v,{})}),document.getElementById("root"))},68:function(e,n,t){}},[[176,1,2]]]);
//# sourceMappingURL=main.233d0a11.chunk.js.map